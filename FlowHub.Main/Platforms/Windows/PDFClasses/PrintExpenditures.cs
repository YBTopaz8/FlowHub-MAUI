using System.Collections.ObjectModel;
using System.Diagnostics;
using FlowHub.Models;
using iText.Kernel.Colors;
using iText.Kernel.Pdf;
using iText.Layout;
using iText.Layout.Element;
using SharpCompress.Common;
using Color = iText.Kernel.Colors.Color;

namespace FlowHub.Main.PDF_Classes;

//Printing on Windows
public class PrintExpenditures
{
    public async Task SaveExpenditureToPDF(ObservableCollection<ExpendituresModel> expList, string userCurrency)
    {
        string path = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "FlowHub");
        if (!Directory.Exists(path))
        {
            Directory.CreateDirectory(path);
        }
        string fileName = $"FlowOutsReport_{userCurrency}_{DateTime.Now:ddd, dd MMMM yyyy}.pdf";
        string PathFile = $"{path}/{fileName}";

        string PdfTitle = "Expenditures Report";

        await Task.Run(() => CreatePdfDoc(expList, PathFile, userCurrency));
    }

    static void CreatePdfDoc(ObservableCollection<ExpendituresModel> expList, string PathFile, string userCurrency)
    {
        Color HeaderTextColor = WebColors.GetRGBColor("darkslateblue");

        using PdfWriter writer = new(PathFile);
        using PdfDocument pdf = new (writer);
        Document document = new (pdf, pageSize: iText.Kernel.Geom.PageSize.A4, immediateFlush: false);
        Paragraph header = new Paragraph($"Expenditures Report_{DateTime.Today.ToShortDateString()}")
            .SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER)
            .SetFontColor(HeaderTextColor)
            .SetBold()
            .SetFontSize(20);
        document.Add(header);
        document.Flush();

        Table table = new Table(4, false).UseAllAvailableWidth();

        table.AddHeaderCell("#")
                .SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER);
        table.AddHeaderCell("Reason")
                .SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER);
        table.AddHeaderCell("Amount Spent")
                .SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER);
        table.AddHeaderCell("Date Spent")
                .SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER);

        double totall = 0;
        for (int i = 0; i < expList.Count; i++)
        {
            var item = expList[i];

            table.AddCell(new Paragraph($"{expList.IndexOf(item) + 1}")
                .SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER));

            table.AddCell(new Paragraph($"{item.Reason}")
                .SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER));

            table.AddCell(new Paragraph($"{item.AmountSpent:n3} {userCurrency}")
                .SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER));

            table.AddCell(new Paragraph($"{item.DateSpent.ToShortDateString()}")
                .SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER));

            totall += item.AmountSpent;
        }

        document.Add(table);
        document.Flush();

        Paragraph footerText = new($"Total Spent: {totall:n3} {userCurrency}");
        Paragraph waterMarkText = new("Report Generated by FlowHub App");
        document.Add(footerText).SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER);
        document.Flush();
        document.Add(waterMarkText).SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER).SetFontSize(13);
        document.Flush();

        int numberPages = pdf.GetNumberOfPages();
        for (int i = 1; i <= numberPages; i++)
        {
            document.ShowTextAligned(new Paragraph(string
               .Format("Page" + i + " of " + numberPages)),
               559, 806, i, iText.Layout.Properties.TextAlignment.LEFT,
               iText.Layout.Properties.VerticalAlignment.BOTTOM, 0);
        }

        document.Close();
    }

}
