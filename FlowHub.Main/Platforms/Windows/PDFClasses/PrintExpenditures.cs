using iText.Kernel.Pdf;
using iText.Layout;
using iText.Layout.Element;
using FlowHub.Models;
using iText.Kernel.Colors;
using Color = iText.Kernel.Colors.Color;
using System.Collections.ObjectModel;

namespace FlowHub.Main.PDF_Classes;

//Printing on Android
public class PrintExpenditures
{
    public void SaveExpenditureToPDF(ObservableCollection<ExpendituresModel> expList, string userCurrency)
    {
        //PermissionStatus statusread = await Permissions.RequestAsync<Permissions.StorageRead>();
        //PermissionStatus statuswrite = await Permissions.RequestAsync<Permissions.StorageWrite>();
        string path;
   //     path = Android.OS.Environment.GetExternalStoragePublicDirectory(Android.OS.Environment.DirectoryDocuments).AbsolutePath;
        path = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
        string fileName = "ExpendituresReport.pdf";
        string PathFile = $"{path}/{fileName}";

        string PdfTitle = "Expenditures Report";

        CreatePdfDoc(expList, PathFile, userCurrency);

        SharePdfFile(PdfTitle, PathFile);
    }

    void CreatePdfDoc(ObservableCollection<ExpendituresModel> expList, string PathFile, string userCurrency)
    {
        Color HeaderTextColor = WebColors.GetRGBColor("darkslateblue");


        PdfWriter writer = new PdfWriter(PathFile);
        PdfDocument pdf = new PdfDocument(writer);
        Document document = new Document(pdf);
        Paragraph header = new Paragraph($"Expenditures Report_{DateTime.Today.ToShortDateString()}")
            .SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER)
            .SetFontColor(HeaderTextColor)
            .SetBold()
            .SetFontSize(20);
        document.Add(header);

        Table table = new Table(4, false).UseAllAvailableWidth();

        table.AddHeaderCell("#")
                .SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER);
        table.AddHeaderCell("Reason")
                .SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER);
        table.AddHeaderCell("Amount Spent")
                .SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER);
        table.AddHeaderCell("Date Spent")
                .SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER);

        double totall = 0;
        for (int i = 0; i < expList.Count; i++)
        {
            var item = expList[i];

            table.AddCell(new Paragraph($"{expList.IndexOf(item) + 1}")
                .SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER));

            table.AddCell(new Paragraph($"{item.Reason}")
                .SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER));

            table.AddCell(new Paragraph($"{item.AmountSpent:n2} {userCurrency}")
                .SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER));

            table.AddCell(new Paragraph($"{item.DateSpent.ToShortDateString()}")
                .SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER));

            totall += item.AmountSpent;

        }

        document.Add(table);

        Paragraph footerText = new($"Total Spent: {totall:n2} {userCurrency}");
        Paragraph waterMarkText = new("Report Generated by FlowHub App");
        document.Add(footerText).SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER);
        document.Add(waterMarkText).SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER).SetFontSize(13);

        int numberPages = pdf.GetNumberOfPages();
        for (int i = 1; i <= numberPages; i++)
        {
            document.ShowTextAligned(new Paragraph(string
               .Format("Page" + i + " of " + numberPages)),
               559, 806, i, iText.Layout.Properties.TextAlignment.LEFT,
               iText.Layout.Properties.VerticalAlignment.BOTTOM, 0);
        }

        document.Close();
    }

    public async void SharePdfFile(string PdfTitle, string FilePath)
    {
        await Share.Default.RequestAsync(new ShareFileRequest
        {
            Title = PdfTitle,
            File = new ShareFile(FilePath)
        });
    }

}
